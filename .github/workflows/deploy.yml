# ===========================================
# GitHub Actions - CI/CD Pipeline
# ===========================================
# Este workflow se ejecuta autom√°ticamente cuando haces "git push" a la rama "main"
# Construye una imagen Docker y la sube a Docker Hub

name: Build and Push to Docker Hub

# TRIGGER: Cu√°ndo se ejecuta este workflow
on:
  push:
    branches:
      - main  # Solo cuando subes c√≥digo a la rama "main"
  workflow_dispatch:  # Tambi√©n permite ejecutarlo manualmente desde GitHub

# JOBS: Las tareas que se van a ejecutar
jobs:
  build-and-push:
    name: Build Docker Image and Push to Docker Hub
    runs-on: ubuntu-latest  # Usa una m√°quina virtual Ubuntu de GitHub

    steps:
      # PASO 1: Descargar tu c√≥digo desde GitHub
      - name: Checkout code
        uses: actions/checkout@v4
        # Esto es como hacer "git clone" de tu repositorio

      # PASO 2: Configurar Docker Buildx (herramienta avanzada de Docker)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # Buildx permite construir im√°genes m√°s eficientemente

      # PASO 3: Login a Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Tu usuario de Docker Hub (configuraremos esto)
          password: ${{ secrets.DOCKER_TOKEN }}      # Tu token de Docker Hub (configuraremos esto)
        # Esto es como hacer "docker login" desde la terminal

      # PASO 4: Extraer metadata (versi√≥n, tags, etc.)
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-
        # Crea tags para tu imagen (latest, y un tag con el commit hash)

      # PASO 5: Construir y subir la imagen a Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .              # Usa el directorio actual
          file: ./Dockerfile      # Usa este Dockerfile
          push: true              # Sube la imagen a Docker Hub
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:latest
          cache-to: type=inline
        # Esto construye tu imagen Docker y la sube a Docker Hub autom√°ticamente

      # PASO 6: Notificaci√≥n de √©xito
      - name: Deployment summary
        if: success()
        run: |
          echo "‚úÖ Build completado exitosamente!"
          echo "üì¶ Imagen disponible en: ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:latest"
          echo "üöÄ Ahora puedes actualizar tu stack en Portainer"

      # PASO 7: Notificaci√≥n de error
      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Build fall√≥. Revisa los logs arriba para ver el error."
